<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',5);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "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",
            '32' => ""
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => "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"
        ),
        'EN' => array(
            '42' => "",
            '32' => "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"
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $target, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    // These targets don't support BEEP condact

    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];

        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B04;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) Error("Can not allocate the data on RAM");

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
