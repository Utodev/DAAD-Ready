<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',5);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "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",
            '32' => "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"
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $target, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    // These targets don't support BEEP condact

    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];

        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B04;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) Error("Can not allocate the data on RAM");

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
